// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function(require) {
    var DirtyForm;
    require('jquery');
    return DirtyForm = (function() {

      function DirtyForm(options) {
        this.inputChecker = __bind(this.inputChecker, this);

        var allElse, changeElements, form, inputs,
          _this = this;
        this.settings = $.extend({}, options);
        form = this.settings.form;
        if (form.hasClass('dirtyform')) {
          form.off('dirty').off('clean').off('.dirtyform');
        } else {
          form.addClass('dirtyform');
        }
        inputs = $(':input:not(:submit,:password,:button)', form);
        changeElements = inputs.filter(':radio,:checkbox,select');
        form.on('change.dirtyform', ':radio,:checkbox,select', {
          inputs: changeElements
        }, this.inputChecker);
        changeElements.each(function(itr, elem) {
          var input;
          input = $(elem);
          return input.data('initial', _this.getValue(input));
        });
        allElse = inputs.not(':radio,:checkbox,select');
        form.on('keyup.dirtyform', ':input:not(:submit,:password,:button,:radio,:checkbox,select)', {
          inputs: allElse
        }, this.inputChecker);
        allElse.each(function(itr, elem) {
          var input;
          input = $(elem);
          return input.data('initial', _this.getValue(input));
        });
        if (this.settings.both) {
          form.on('clean dirty', this.settings.both);
        } else {
          if (this.settings.clean) {
            form.on('clean', this.settings.clean);
          }
          if (this.settings.dirty) {
            form.on('dirty', this.settings.dirty);
          }
        }
      }

      DirtyForm.prototype.getValue = function(input) {
        var val;
        if (input.is(':radio,checkbox')) {
          val = input.attr('checked');
          if (val !== void 0) {
            return val;
          } else {
            return false;
          }
        } else {
          return input.val();
        }
      };

      DirtyForm.prototype.inputChecker = function(event) {
        var current, form, initial, inputs, npt, vals;
        npt = $(event.target);
        form = npt.parents('.dirtyform');
        initial = npt.data('initial');
        current = this.getValue(npt);
        inputs = event.data.inputs;
        if (initial !== current) {
          npt.addClass('changed');
        } else {
          npt.removeClass('changed');
        }
        this.isDirty = inputs.filter('.changed').length > 0;
        vals = {
          from: initial,
          to: current,
          target: npt,
          event: event
        };
        if (this.isDirty) {
          return form.data('dirty', true).trigger('dirty', vals);
        } else {
          return form.data('dirty', false).trigger('clean', vals);
        }
      };

      return DirtyForm;

    })();
  });

}).call(this);
